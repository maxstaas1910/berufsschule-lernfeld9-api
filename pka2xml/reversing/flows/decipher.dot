digraph GRAPH_0 {

  // Generated by Graph::Easy 0.76 at Fri Dec 11 12:52:14 2020

  edge [ arrowhead=normal ];
  graph [
    label="Graph of _ZN4Util8decipherIN8CryptoPP7TwofishEEE10QByteArrayRKS3_PhS6_",
    labelloc=top ];
  node [
    fillcolor=white,
    fontsize=11,
    shape=box,
    style=filled ];

  0 [ label="_ZN4Util8decipherIN8CryptoPP7TwofishEEE10QByteArrayRKS3_PhS6_:\lpush    r15\lpush    r14\lmov     r15, rdi\lpush    r13\lpush    r12\lmov     r14, rdx\lpush    rbp\lpush    rbx\lmov     r13, rcx\lsub     rsp, 12C8h\llea     r12, [rsp+12F8h+var_12E8]\llea     rbx, [rsp+12F8h+decryptor]\lmov     [rsp+12F8h+var_12F0], rsi\lmov     rax, fs:28h\lmov     [rsp+12F8h+var_40], rax\lxor     eax, eax\llea     rax, [r12+10h]\lmov     rdi, rbx\lmov     qword ptr [rsp+12F8h+var_12E0], 0\lmov     [rsp+12F8h+var_12D8], 0\lmov     [rsp+12F8h+var_12E8], rax\lcall    _ZN8CryptoPP8EAX_BaseC2Ev; CryptoPP::EAX_Base::EAX_Base(void)\llea     rbp, _ZTVN8CryptoPP9EAX_FinalINS_7TwofishELb0EEE; `vtable for'CryptoPP::EAX_Final<CryptoPP::Twofish,false>\llea     rdi, [rbx+0F0h]\lmov     esi, 1\llea     rax, [rbp+10h]\lmov     [rsp+12F8h+decryptor], rax\llea     rax, [rbp+180h]\lmov     [rsp+12F8h+var_1250], rax\llea     rax, [rbp+230h]\lmov     [rsp+12F8h+var_1248], rax\llea     rax, _ZTVN8CryptoPP21SimpleKeyingInterfaceE; `vtable for'CryptoPP::SimpleKeyingInterface\ladd     rax, 10h\lmov     [rsp+12F8h+var_1170], rax\lcall    _ZN8CryptoPP9AlgorithmC2Eb; CryptoPP::Algorithm::Algorithm(bool)\llea     rax, _ZTVN8CryptoPP4CMACINS_7TwofishEEE; `vtable for'CryptoPP::CMAC<CryptoPP::Twofish>\llea     rdi, [rbx+128h]\lmov     esi, 1\lmov     [rsp+12F8h+var_1158], 0FFFFFFFFFFFFFFFFh\lmov     [rsp+12F8h+var_1150], 0\lmov     [rsp+12F8h+var_1148], 0\lmov     [rsp+12F8h+var_1140], 0\llea     rdx, [rax+10h]\ladd     rax, 0E0h\lmov     [rsp+12F8h+var_1168], rax\llea     rax, _ZTVN8CryptoPP21SimpleKeyingInterfaceE; `vtable for'CryptoPP::SimpleKeyingInterface\lmov     [rsp+12F8h+var_1170], rdx\ladd     rax, 10h\lmov     [rsp+12F8h+var_1138], rax\lcall    _ZN8CryptoPP9AlgorithmC2Eb; CryptoPP::Algorithm::Algorithm(bool)\lmov     rax, 3FFFFFFFFFFFFFFFh\llea     rdx, [rbx+130h]\lmov     r8d, 16\lmov     [rsp+12F8h+var_1080], rax\lmov     [rsp+12F8h+var_60], rax\llea     rax, [rbx+1F0h]\lmov     [rsp+12F8h+input], rdx\lmov     rcx, r13; address of iv\lmov     rsi, r14; address of key\lmov     [rsp+12F8h+var_50], rax\llea     rax, _ZTVN8CryptoPP16BlockCipherFinalILNS_9CipherDirE0ENS_7Twofish3EncEEE; `vtable for'CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0,CryptoPP::Twofish::Enc>\lmov     rdi, rbx\lmov     [rsp+12F8h+var_1078], 28h\lmov     [rsp+12F8h+var_1087], 1\lmov     [rsp+12F8h+var_58], 400h\lmov     [rsp+12F8h+var_67], 1\llea     rdx, [rax+10h]\ladd     rax, 0C8h\lmov     [rsp+12F8h+var_1130], rax\lmov     [rsp+12F8h+var_1138], rdx\lmov     edx, 16\lcall    _ZN8CryptoPP21SimpleKeyingInterface12SetKeyWithIVEPKhmS2_m; CryptoPP::SimpleKeyingInterface::SetKeyWithIV(uchar const*,ulong,uchar const*,ulong)\lmov     edi, 20h ; ' '; unsigned __int64\lcall    __Znwm; operator new(ulong)\lxor     esi, esi\lmov     rdi, rax\lmov     r13, rax\lcall    _ZN8CryptoPP9AlgorithmC2Eb; CryptoPP::Algorithm::Algorithm(bool)\llea     rax, _ZTVN8CryptoPP18StringSinkTemplateINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE; `vtable for'CryptoPP::StringSinkTemplate<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>\lmov     [r13+18h], r12\lmov     edi, 230h; unsigned __int64\llea     rdx, [rax+10h]\ladd     rax, 416\lmov     [r13+8], rax\lmov     [r13+0], rdx\lcall    __Znwm; operator new(ulong)\lmov     r9d, 5\lmov     r8d, 0FFFFFFFFh\lmov     ecx, 10h\lmov     rdx, r13\lmov     rsi, rbx\lmov     rdi, rax\lmov     r14, rax\lcall    _ZN8CryptoPP29AuthenticatedDecryptionFilterC2ERNS_28AuthenticatedSymmetricCipherEPNS_22BufferedTransformationEjiNS_21BlockPaddingSchemeDef18BlockPaddingSchemeE; CryptoPP::AuthenticatedDecryptionFilter::AuthenticatedDecryptionFilter(CryptoPP::AuthenticatedSymmetricCipher &,CryptoPP::BufferedTransformation *,uint,int,CryptoPP::BlockPaddingSchemeDef::BlockPaddingScheme)\lmov     rax, [rsp+8]\llea     rdi, [rsp+30h]\lmov     r8, r14\lmov     ecx, 1\lmov     rsi, [rax]\lmovsxd  rdx, dword ptr [rsi+4]\ladd     rsi, [rsi+16]\lcall    _ZN8CryptoPP12StringSourceC2EPKhmbPNS_22BufferedTransformationE; CryptoPP::StringSource::StringSource(uchar const*,ulong,bool,CryptoPP::BufferedTransformation *)\llea     rax, _ZTVN8CryptoPP6FilterE; `vtable for'CryptoPP::Filter\lmov     rdi, [rsp+48h]\llea     rdx, [rax+10h]\ladd     rax, 1B8h\ltest    rdi, rdi\lmov     [rsp+12F8h+var_12C0], rax\lmov     [rsp+12F8h+stringsource], rdx\ljz      short loc_34AC17F\l", rank=0 ]
  1 [ label="mov     rax, [rdi]\lcall    qword ptr [rax+8]\l" ]
  10 [ label="call    __ZdlPv; operator delete(void *)\l" ]
  11 [ label="mov     rdi, rbp; struct _Unwind_Exception *\lcall    __Unwind_Resume\l", rank=18 ]
  12 [ label="mov     r14, rax\lmov     rdi, r13; void *\lcall    __ZdlPv; operator delete(void *)\lmov     r13, r14\ljmp     short loc_34AC219\l" ]
  13 [ label="mov     r13, rax\ljmp     short loc_34AC219\l" ]
  14 [ label="mov     rbp, rax\llea     rax, _ZTVN8CryptoPP9CMAC_BaseE; `vtable for'CryptoPP::CMAC_Base\llea     rdi, [rbx+0F8h]\llea     rdx, [rax+10h]\ladd     rax, 0D8h\lmov     [rsp+12F8h+var_1168], rax\lmov     [rsp+12F8h+var_1170], rdx\lcall    _ZN8CryptoPP8SecBlockIhNS_20AllocatorWithCleanupIhLb0EEEED2Ev; CryptoPP::SecBlock<uchar,CryptoPP::AllocatorWithCleanup<uchar,false>>::~SecBlock()\l" ]
  15 [ label="mov     rdi, rbx\lcall    _ZN8CryptoPP8EAX_BaseD2Ev; CryptoPP::EAX_Base::~EAX_Base()\ljmp     short loc_34AC25A\l" ]
  16 [ label="mov     rbp, rax\ljmp     short loc_34AC2BA\l" ]
  17 [ label="mov     rbp, rax\ljmp     short loc_34AC25A\l" ]
  2 [ label="mov     edx, [rsp+12F8h+var_12E0]; int\lmov     rsi, [rsp+12F8h+var_12E8]; char *\lmov     rdi, r15; this\lcall    __ZN10QByteArrayC1EPKci; QByteArray::QByteArray(char const*,int)\llea     rax, [rbp+10h]\llea     rdi, [rbx+0E8h]\ladd     r12, 10h\lmov     [rsp+12F8h+decryptor], rax\llea     rax, [rbp+180h]\lmov     [rsp+12F8h+var_1250], rax\llea     rax, [rbp+230h]\lmov     [rsp+12F8h+var_1248], rax\lcall    _ZN8CryptoPP4CMACINS_7TwofishEED2Ev; CryptoPP::CMAC<CryptoPP::Twofish>::~CMAC()\lmov     rdi, rbx\lcall    _ZN8CryptoPP8EAX_BaseD2Ev; CryptoPP::EAX_Base::~EAX_Base()\lmov     rdi, [rsp+12F8h+var_12E8]; void *\lcmp     rdi, r12\ljz      short loc_34AC1E1\l" ]
  3 [ label="call    __ZdlPv; operator delete(void *)\l" ]
  4 [ label="mov     rcx, [rsp+12F8h+var_40]\lxor     rcx, fs:28h\lmov     rax, r15\ljnz     short loc_34AC209\l" ]
  5 [ label="add     rsp, 12C8h\lpop     rbx\lpop     rbp\lpop     r12\lpop     r13\lpop     r14\lpop     r15\lretn\l", rank=18 ]
  6 [ label="call    ___stack_chk_fail\l", rank=18 ]
  7 [ label="mov     rdi, r14; void *\lmov     r13, rax\lcall    __ZdlPv; operator delete(void *)\l" ]
  8 [ label="lea     rax, [rbp+10h]\llea     rdi, [rbx+0E8h]\lmov     [rsp+12F8h+decryptor], rax\llea     rax, [rbp+180h]\lmov     [rsp+12F8h+var_1250], rax\llea     rax, [rbp+230h]\lmov     rbp, r13\lmov     [rsp+12F8h+var_1248], rax\lcall    _ZN8CryptoPP4CMACINS_7TwofishEED2Ev; CryptoPP::CMAC<CryptoPP::Twofish>::~CMAC()\lmov     rdi, rbx\lcall    _ZN8CryptoPP8EAX_BaseD2Ev; CryptoPP::EAX_Base::~EAX_Base()\l" ]
  9 [ label="mov     rdi, [rsp+12F8h+var_12E8]; void *\ladd     r12, 10h\lcmp     rdi, r12\ljz      short loc_34AC26D\l" ]

  0 -> 2 [ color="#008000", fontcolor="#008000", label=true ]
  0 -> 1 [ color="#ff0000", fontcolor="#ff0000", label=false ]
  1 -> 2 [ color="#000000" ]
  2 -> 4 [ color="#008000", fontcolor="#008000", label=true ]
  2 -> 3 [ color="#ff0000", fontcolor="#ff0000", label=false ]
  3 -> 4 [ color="#000000" ]
  4 -> 6 [ color="#008000", fontcolor="#008000", label=true ]
  4 -> 5 [ color="#ff0000", fontcolor="#ff0000", label=false ]
  7 -> 8 [ color="#000000" ]
  8 -> 9 [ color="#000000" ]
  9 -> 11 [ color="#008000", fontcolor="#008000", label=true ]
  9 -> 10 [ color="#ff0000", fontcolor="#ff0000", label=false ]
  10 -> 11 [ color="#000000" ]
  12 -> 8 [ color="#000000" ]
  13 -> 8 [ color="#000000" ]
  14 -> 15 [ color="#000000" ]
  15 -> 9 [ color="#000000" ]
  16 -> 15 [ color="#000000" ]
  17 -> 9 [ color="#000000" ]

}
